/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.app.dialog;

import com.app.beans.LoadBean;
import com.app.database.DatabaseManager;
import com.app.database.DatabaseQuery;
import com.app.database.DbConnectionManager;
import com.app.frame.ApplicationFrame;
import com.app.log.AppLog;
import com.app.utils.Utils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Font;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;

public class EditLoad extends javax.swing.JDialog {

	private int id;
	private ApplicationFrame frame;

	/**
	 * Creates new form EditLoad
	 * @wbp.parser.constructor
	 */
	public EditLoad(java.awt.Frame parent, boolean modal,
			Connection connection, int id) {
		super(parent, modal);
		getContentPane().setBackground(Color.DARK_GRAY);
		frame = (ApplicationFrame) parent;
		initComponents();
		this.id = id;
		loadDriverList();
		selectLoadListById(connection, id);
	}

	private EditLoad(JFrame jFrame, boolean b) {
		throw new UnsupportedOperationException("Not supported yet."); // To
																		// change
																		// body
																		// of
																		// generated
																		// methods,
																		// choose
																		// Tools
																		// |
																		// Templates.
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		pickup_date_field = new org.jdesktop.swingx.JXDatePicker();
		delivery_date_field = new org.jdesktop.swingx.JXDatePicker();
		jLabel6 = new javax.swing.JLabel();
		driver_assigned_combolist = new javax.swing.JComboBox();
		save_button = new JButton("Add");
		jLabel7 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		jLabel11 = new javax.swing.JLabel();
		jLabel12 = new javax.swing.JLabel();
		jLabel13 = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		company_name_txtfield = new javax.swing.JTextField();
		company_phone_txtfield = new javax.swing.JTextField();
		delivery_name_of_place_txtfield = new javax.swing.JTextField();
		delivery_street_address_txtfield = new javax.swing.JTextField();
		delivery_city_txtfield = new javax.swing.JTextField();
		delivery_state_txtfield = new javax.swing.JTextField();
		delivery_zipcode_txtfield = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		status_combolist = new javax.swing.JComboBox();
		jLabel15 = new javax.swing.JLabel();
		jLabel16 = new javax.swing.JLabel();
		jLabel17 = new javax.swing.JLabel();
		jLabel18 = new javax.swing.JLabel();
		jLabel19 = new javax.swing.JLabel();
		pickup_name_of_place_txtfield = new javax.swing.JTextField();
		pickup_street_address_txtfield = new javax.swing.JTextField();
		pickup_city_txtfield = new javax.swing.JTextField();
		pickup_state_txtfield = new javax.swing.JTextField();
		pickup_zipcode_txtfield = new javax.swing.JTextField();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setResizable(false);

		jPanel1.setBackground(new Color(135, 206, 235));

		jLabel1.setFont(new Font("Cambria Math", Font.BOLD, 24)); // NOI18N
		jLabel1.setText("Edit Load");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1Layout.setHorizontalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addGap(355)
					.addComponent(jLabel1)
					.addContainerGap(372, Short.MAX_VALUE))
		);
		jPanel1Layout.setVerticalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
					.addContainerGap(25, Short.MAX_VALUE)
					.addComponent(jLabel1)
					.addContainerGap())
		);
		jPanel1.setLayout(jPanel1Layout);

		jPanel2.setBackground(new java.awt.Color(255, 255, 255));

		jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel4.setText("PickUp Date");

		jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel5.setText("Delivery Date");

		jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel6.setText("Driver Assigned Id");

		driver_assigned_combolist.setFont(new java.awt.Font("Times New Roman",
				2, 14)); // NOI18N

		save_button.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		save_button.setText("Save");
		save_button.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				save_buttonMouseClicked(evt);
			}
		});

		jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel7.setText("Company Name");

		jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel8.setText("Company PhoneNo");

		jLabel9.setFont(new Font("Times New Roman", Font.BOLD, 16)); // NOI18N
		jLabel9.setForeground(new Color(135, 206, 235));
		jLabel9.setText("PickUp Info");

		jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel10.setText("Name of Place");

		jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel11.setText("Street Address");

		jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel12.setText("City");

		jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel13.setText("State");

		jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel14.setText("Zip Code");

		company_name_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N

		company_phone_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N

		delivery_name_of_place_txtfield.setFont(new java.awt.Font(
				"Times New Roman", 2, 14)); // NOI18N

		delivery_street_address_txtfield.setFont(new java.awt.Font(
				"Times New Roman", 2, 14)); // NOI18N

		delivery_city_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N
		delivery_city_txtfield
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						delivery_city_txtfieldActionPerformed(evt);
					}
				});

		delivery_state_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N

		delivery_zipcode_txtfield.setFont(new java.awt.Font("Times New Roman",
				2, 14)); // NOI18N

		jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel2.setText("Status");

		status_combolist.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
		status_combolist.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "To be Dispatched", "Dispatched", "Picked up",
						"Delivered" }));

		jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel15.setText("Name of Place");

		jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel16.setText("Street Address");

		jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel17.setText("City");

		jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel18.setText("State");

		jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		jLabel19.setText("Zip Code");

		pickup_name_of_place_txtfield.setFont(new java.awt.Font(
				"Times New Roman", 2, 14)); // NOI18N

		pickup_street_address_txtfield.setFont(new java.awt.Font(
				"Times New Roman", 2, 14)); // NOI18N

		pickup_city_txtfield
				.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
		pickup_city_txtfield
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						pickup_city_txtfieldActionPerformed(evt);
					}
				});

		pickup_state_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N

		pickup_zipcode_txtfield.setFont(new java.awt.Font("Times New Roman", 2,
				14)); // NOI18N
		
		JLabel lblNewLabel = new JLabel("Delivery Info");
		lblNewLabel.setForeground(new Color(135, 206, 235));
		lblNewLabel.setFont(new Font("Times New Roman", Font.BOLD, 16));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2Layout.setHorizontalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addContainerGap()
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
								.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING, false)
									.addGroup(Alignment.LEADING, jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel2)
										.addGap(149)
										.addComponent(status_combolist, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
									.addGroup(Alignment.LEADING, jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel6)
										.addGap(72)
										.addComponent(driver_assigned_combolist, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
									.addGroup(Alignment.LEADING, jPanel2Layout.createSequentialGroup()
										.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
											.addComponent(jLabel7)
											.addComponent(jLabel8)
											.addComponent(jLabel14)
											.addComponent(jLabel4))
										.addGap(72)
										.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
											.addComponent(pickup_street_address_txtfield, 172, 172, Short.MAX_VALUE)
											.addComponent(pickup_city_txtfield, 172, 172, Short.MAX_VALUE)
											.addComponent(pickup_state_txtfield, 172, 172, Short.MAX_VALUE)
											.addComponent(pickup_date_field, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
											.addComponent(pickup_zipcode_txtfield, 172, 172, Short.MAX_VALUE)
											.addComponent(company_phone_txtfield)
											.addComponent(pickup_name_of_place_txtfield, 172, 172, Short.MAX_VALUE)
											.addComponent(company_name_txtfield)))
									.addComponent(jLabel15, Alignment.LEADING)
									.addComponent(jLabel16, Alignment.LEADING)
									.addComponent(jLabel12, Alignment.LEADING)
									.addComponent(jLabel13, Alignment.LEADING))
								.addComponent(jLabel9))
							.addPreferredGap(ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
								.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
									.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel18)
										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(delivery_state_txtfield, 172, 172, 172))
									.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel17)
										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(delivery_city_txtfield, 172, 172, 172))
									.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel11)
										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(delivery_street_address_txtfield, 172, 172, 172))
									.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(jLabel10)
										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(delivery_name_of_place_txtfield, 172, 172, 172))
									.addGroup(jPanel2Layout.createSequentialGroup()
										.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING)
											.addGroup(jPanel2Layout.createSequentialGroup()
												.addComponent(jLabel19)
												.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
											.addGroup(jPanel2Layout.createSequentialGroup()
												.addComponent(jLabel5)
												.addGap(123)))
										.addGap(6)
										.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING, false)
											.addComponent(delivery_date_field, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
											.addComponent(delivery_zipcode_txtfield, 172, 172, Short.MAX_VALUE))))
								.addComponent(lblNewLabel))
							.addGap(17))
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGap(374)
							.addComponent(save_button, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap())
		);
		jPanel2Layout.setVerticalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel7)
						.addComponent(company_name_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel8)
						.addComponent(company_phone_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel9)
						.addComponent(lblNewLabel))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel15)
						.addComponent(pickup_name_of_place_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel10)
						.addComponent(delivery_name_of_place_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel16)
						.addComponent(pickup_street_address_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel11)
						.addComponent(delivery_street_address_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel12)
						.addComponent(pickup_city_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel17)
						.addComponent(delivery_city_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel13)
						.addComponent(pickup_state_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel18)
						.addComponent(delivery_state_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(pickup_zipcode_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel19)
						.addComponent(delivery_zipcode_txtfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel14))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(pickup_date_field, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel5)
						.addComponent(delivery_date_field, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel4))
					.addGap(47)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel6)
						.addComponent(driver_assigned_combolist, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel2)
						.addComponent(status_combolist, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addComponent(save_button)
					.addGap(218))
		);
		jPanel2.setLayout(jPanel2Layout);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
						.addComponent(jPanel1, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
						.addComponent(jPanel2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE))
					.addGap(81))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 518, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(151, Short.MAX_VALUE))
		);
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void save_buttonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_save_buttonMouseClicked
		// TODO add your handling code here:
		saveLoad();
	}// GEN-LAST:event_save_buttonMouseClicked

	private void delivery_city_txtfieldActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_delivery_city_txtfieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_delivery_city_txtfieldActionPerformed

	private void pickup_city_txtfieldActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pickup_city_txtfieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_pickup_city_txtfieldActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditLoad.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditLoad.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditLoad.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditLoad.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				EditLoad dialog = new EditLoad(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField company_name_txtfield;
	private javax.swing.JTextField company_phone_txtfield;
	private javax.swing.JTextField delivery_city_txtfield;
	private org.jdesktop.swingx.JXDatePicker delivery_date_field;
	private javax.swing.JTextField delivery_name_of_place_txtfield;
	private javax.swing.JTextField delivery_state_txtfield;
	private javax.swing.JTextField delivery_street_address_txtfield;
	private javax.swing.JTextField delivery_zipcode_txtfield;
	private javax.swing.JComboBox driver_assigned_combolist;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel13;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel15;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel17;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel19;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JTextField pickup_city_txtfield;
	private org.jdesktop.swingx.JXDatePicker pickup_date_field;
	private javax.swing.JTextField pickup_name_of_place_txtfield;
	private javax.swing.JTextField pickup_state_txtfield;
	private javax.swing.JTextField pickup_street_address_txtfield;
	private javax.swing.JTextField pickup_zipcode_txtfield;
	private javax.swing.JButton save_button;
	private javax.swing.JComboBox status_combolist;

	// End of variables declaration//GEN-END:variables

	/**
	 * Update Load Informations into database
	 */
	private void saveLoad() {

		if (DatabaseManager.getInstance() != null) {
			try {
				if (DbConnectionManager.getConnection() != null) {
					LoadBean bean = new LoadBean();
					bean.setId(id);
					bean.setCompany_name(company_name_txtfield.getText());
					bean.setCompany_phone(company_phone_txtfield.getText());
					bean.setPickup_name_of_place(pickup_name_of_place_txtfield
							.getText());
					bean.setPickup_street_address(pickup_street_address_txtfield
							.getText());
					bean.setPickup_state(pickup_state_txtfield.getText());
					bean.setPickup_city(pickup_city_txtfield.getText());
					bean.setPickup_zip_code(pickup_zipcode_txtfield.getText());
					bean.setPickup_date(Utils.getDate(pickup_date_field));
					bean.setDelivery_name_of_place(delivery_name_of_place_txtfield
							.getText());
					bean.setDelivery_state(delivery_state_txtfield.getText());
					bean.setDelivery_street_address(delivery_street_address_txtfield
							.getText());
					bean.setDelivery_city(delivery_city_txtfield.getText());
					bean.setDelivery_zip_code(delivery_zipcode_txtfield
							.getText());
					bean.setDelivery_date(Utils.getDate(delivery_date_field));
					String driver_assigned = driver_assigned_combolist
							.getSelectedItem().toString();
					String driver_assigned_id = driver_assigned.split("/")[0];
					String driver_assigned_name = driver_assigned.split("/")[1];
					bean.setDriver_assigned_id(driver_assigned_id);
					bean.setDriver_assigned_name(driver_assigned_name);
					bean.setStatus(status_combolist.getSelectedItem()
							.toString());

					boolean flag = DatabaseManager.getInstance().updateLoad(
							DbConnectionManager.getConnection(), bean);
					AppLog.success("Update Load", flag);
					if (flag) {
						frame.updateLoadList();
						Utils.infoBox("Update Successfully",
								"LOAD INFORMATIONS");

					} else {
						Utils.infoBox("Update Error", "LOAD INFORMATIONS");
					}
					EditLoad.this.dispose();
				}
			} catch (ClassNotFoundException ex) {
				Logger.getLogger(EditDriver.class.getName()).log(Level.SEVERE,
						null, ex);
			}
		}
	}

	/**
	 * Select LoadList Data ById
	 *
	 * @param connection
	 * @param id
	 */
	private void selectLoadListById(Connection connection, int id) {

		PreparedStatement ps;
		ResultSet rs = null;
		try {

			ps = connection.prepareStatement(DatabaseQuery.GET_LOAD_INFO_BY_ID);
			ps.setInt(1, id);
			rs = ps.executeQuery();

			// Extract data from result set
			while (rs.next()) {
				// Retrieve by column name

				String company_name = rs.getString("company_name");
				String company_phone = rs.getString("company_phone");
				String pickup_name_of_place = rs
						.getString("pickup_name_of_place");
				String pickup_street_address = rs
						.getString("pickup_street_address");
				String pickup_city = rs.getString("pickup_city");
				String pickup_state = rs.getString("pickup_state");
				String pickup_zip_code = rs.getString("pickup_zip_code");
				String pickup_date = rs.getString("pickup_date");
				String delivery_name_of_place = rs
						.getString("delivery_name_of_place");
				String delivery_street_address = rs
						.getString("delivery_street_address");
				String delivery_city = rs.getString("delivery_city");
				String delivery_state = rs.getString("delivery_state");
				String delivery_zip_code = rs.getString("delivery_zip_code");
				String delivery_date = rs.getString("delivery_date");
				String driver_assigned_id = rs.getString("driver_assigned_id");
				String status = rs.getString("status");

				company_name_txtfield.setText(company_name);
				company_phone_txtfield.setText(company_phone);
				pickup_name_of_place_txtfield.setText(pickup_name_of_place);
				pickup_street_address_txtfield.setText(pickup_street_address);
				pickup_city_txtfield.setText(pickup_city);
				pickup_state_txtfield.setText(pickup_state);
				pickup_zipcode_txtfield.setText(pickup_zip_code);
				pickup_date_field.setDate(new Date(pickup_date));
				delivery_name_of_place_txtfield.setText(delivery_name_of_place);
				delivery_street_address_txtfield
						.setText(delivery_street_address);
				delivery_city_txtfield.setText(delivery_city);
				delivery_state_txtfield.setText(delivery_state);
				delivery_zipcode_txtfield.setText(delivery_zip_code);
				delivery_date_field.setDate(new Date(delivery_date));
				driver_assigned_combolist.setSelectedItem(driver_assigned_id);
				status_combolist.setSelectedItem(status);
			}
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
	}

	private void loadDriverList() {
		Statement stmt = null; // statement object
		ResultSet rs = null; // result set object
		java.sql.Connection conn = null; // connection object

		try {
			// Returns a database connection from the currently active
			// connection provider
			conn = DbConnectionManager.getConnection();

			// Creates a Statement object for sending SQL statements to the
			// database
			stmt = conn.createStatement();

			// Executes the given SQL statement, which returns a single
			// ResultSet object.
			rs = stmt.executeQuery("select driver_id,username from driverinfo");

			// Extract data from result set
			while (rs.next()) {
				// Retrieve by column name
				String driver_id = rs.getString("driver_id");
				String user_name = rs.getString("username");
				driver_assigned_combolist.addItem(driver_id + "/" + user_name);
			}
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
	}
}
