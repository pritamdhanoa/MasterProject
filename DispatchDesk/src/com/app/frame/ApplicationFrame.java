/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.app.frame;

import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jsoup.Jsoup;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import com.app.beans.DriverBean;
import com.app.beans.LoadBean;
import com.app.database.DatabaseManager;
import com.app.database.DbConnectionManager;
import com.app.delegates.ApplicationListInterface;
import com.app.dialog.AddDriverInformations;
import com.app.dialog.AddLoadInformations;
import com.app.dialog.ChatScreen;
import com.app.dialog.EditDriver;
import com.app.dialog.EditLoad;
import com.app.log.AppLog;
import com.app.utils.ButtonRenderer;
import com.app.utils.ConstantOfApp;
import com.app.utils.Utils;
import com.app.xmpp.controller.XmppManager;

import java.awt.Dimension;
import java.awt.Color;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;
import javax.swing.LayoutStyle.ComponentPlacement;

public class ApplicationFrame extends javax.swing.JFrame implements
		ApplicationListInterface {

	private DefaultTableModel loadTableModel;
	private DefaultTableModel driverTableModel;

	/**
	 * Creates new form ApplicationFrame
	 */
	public ApplicationFrame() {
		initComponents();
		loadDriverJTable();
		loadLoadJTable();
		loadChatUserList();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		chat_pane = new javax.swing.JTabbedPane();
		jPanel5 = new javax.swing.JPanel();
		addDriver_button = new JButton("Add Driver");
		jPanel6 = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		driverJTable = new javax.swing.JTable();
		jPanel7 = new javax.swing.JPanel();
		add_load_button = new JButton("Add Load");
		jPanel4 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		loadJTable = new javax.swing.JTable();
		jPanel8 = new javax.swing.JPanel();
		jPanel9 = new javax.swing.JPanel();
		jScrollPane4 = new javax.swing.JScrollPane();
		userJList = new javax.swing.JList();

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null },
						{ null, null, null, null } }, new String[] { "Title 1",
						"Title 2", "Title 3", "Title 4" }));
		jScrollPane1.setViewportView(jTable1);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setResizable(false);

		jPanel1.setBackground(Color.DARK_GRAY);

		jPanel2.setBackground(new Color(135, 206, 235));

		jLabel1.setFont(new Font("Cambria Math", Font.BOLD, 30)); // NOI18N
		jLabel1.setText("Dispatch Desk");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2Layout.setHorizontalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addGap(54)
					.addComponent(jLabel1)
					.addContainerGap(1069, Short.MAX_VALUE))
		);
		jPanel2Layout.setVerticalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jLabel1)
					.addContainerGap(23, Short.MAX_VALUE))
		);
		jPanel2.setLayout(jPanel2Layout);

		jPanel3.setBackground(new java.awt.Color(255, 255, 255));

		chat_pane.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				chat_paneMouseClicked(evt);
			}
		});

		addDriver_button.setText("Add Driver");
		addDriver_button.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				addDriver_buttonMouseClicked(evt);
			}
		});

		jPanel6.setBackground(new Color(135, 206, 235));

		driverJTable.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		driverJTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Driver ID", "USERNAME", "PHONENO",
						"FIRST NAME", "LAST NAME", "EMAIL", "TRACTOR",
						"TRAILOR", "EDIT", "DELETE" }) {
			boolean[] canEdit = new boolean[] { false, false, false, false,
					false, false, false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		driverJTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				driverJTableMouseClicked(evt);
			}
		});
		jScrollPane2.setViewportView(driverJTable);

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(
				jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				jPanel6Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane2,
								javax.swing.GroupLayout.DEFAULT_SIZE, 981,
								Short.MAX_VALUE).addContainerGap()));
		jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel6Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane2,
								javax.swing.GroupLayout.DEFAULT_SIZE, 263,
								Short.MAX_VALUE).addContainerGap()));

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(
				jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout
				.setHorizontalGroup(jPanel5Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel5Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel5Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel5Layout
																		.createSequentialGroup()
																		.addComponent(
																				addDriver_button)
																		.addGap(0,
																				0,
																				Short.MAX_VALUE))
														.addComponent(
																jPanel6,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap()));
		jPanel5Layout
				.setVerticalGroup(jPanel5Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel5Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(addDriver_button)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel6,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addContainerGap()));

		chat_pane.addTab("Driver List", jPanel5);

		add_load_button.setText("Add Load");
		add_load_button.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				add_load_buttonMouseClicked(evt);
			}
		});

		jPanel4.setBackground(new Color(135, 206, 235));

		loadJTable.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		loadJTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "LOAD ID", "COMPANY NAME", "COMPANY PHONE",
						"PICKUP ADDRESS", "DELIVERY ADDRESS",
						"DRIVER ASSIGNED ID", "STATUS", "SEND MESSAGE", "EDIT",
						"DELETE" }) {
			boolean[] canEdit = new boolean[] { false, false, false, false,
					false, false, false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		loadJTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				loadJTableMouseClicked(evt);
			}
		});
		jScrollPane3.setViewportView(loadJTable);
		if (loadJTable.getColumnModel().getColumnCount() > 0) {
			loadJTable.getColumnModel().getColumn(1).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(2).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(3).setPreferredWidth(200);
			loadJTable.getColumnModel().getColumn(4).setPreferredWidth(200);
			loadJTable.getColumnModel().getColumn(5).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(6).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(7).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(8).setPreferredWidth(100);
			loadJTable.getColumnModel().getColumn(9).setPreferredWidth(100);
		}

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(
				jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel4Layout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane3).addContainerGap()));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel4Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane3,
								javax.swing.GroupLayout.DEFAULT_SIZE, 263,
								Short.MAX_VALUE).addContainerGap()));

		javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(
				jPanel7);
		jPanel7.setLayout(jPanel7Layout);
		jPanel7Layout
				.setHorizontalGroup(jPanel7Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel7Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel7Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jPanel4,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																jPanel7Layout
																		.createSequentialGroup()
																		.addComponent(
																				add_load_button)
																		.addGap(0,
																				924,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		jPanel7Layout
				.setVerticalGroup(jPanel7Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel7Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(add_load_button)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel4,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addContainerGap()));

		chat_pane.addTab("Load List", jPanel7);

		jPanel9.setBackground(new Color(135, 206, 235));

		userJList.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
		userJList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						userJListValueChanged(evt);
					}
				});
		jScrollPane4.setViewportView(userJList);

		javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(
				jPanel9);
		jPanel9.setLayout(jPanel9Layout);
		jPanel9Layout.setHorizontalGroup(jPanel9Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel9Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane4,
								javax.swing.GroupLayout.DEFAULT_SIZE, 981,
								Short.MAX_VALUE).addContainerGap()));
		jPanel9Layout.setVerticalGroup(jPanel9Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel9Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane4,
								javax.swing.GroupLayout.DEFAULT_SIZE, 292,
								Short.MAX_VALUE).addContainerGap()));

		javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(
				jPanel8);
		jPanel8.setLayout(jPanel8Layout);
		jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel8Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel9,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));
		jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel8Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel9,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));

		chat_pane.addTab("Chat Page", jPanel8);

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3Layout.setHorizontalGroup(
			jPanel3Layout.createParallelGroup(Alignment.LEADING)
				.addComponent(chat_pane, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1264, Short.MAX_VALUE)
		);
		jPanel3Layout.setVerticalGroup(
			jPanel3Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
					.addGap(1)
					.addComponent(chat_pane, GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
		);
		jPanel3.setLayout(jPanel3Layout);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1Layout.setHorizontalGroup(
			jPanel1Layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(Alignment.LEADING, jPanel1Layout.createSequentialGroup()
					.addGap(5)
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(jPanel3, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jPanel2, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1264, Short.MAX_VALUE))
					.addGap(5))
		);
		jPanel1Layout.setVerticalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addGap(5)
					.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
					.addContainerGap())
		);
		jPanel1.setLayout(jPanel1Layout);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
		);
		getContentPane().setLayout(layout);

		setSize(new Dimension(1280, 720));
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void addDriver_buttonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_addDriver_buttonMouseClicked
		// TODO add your handling code here:
		clickOnAddDriver();
	}// GEN-LAST:event_addDriver_buttonMouseClicked

	private void add_load_buttonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_add_load_buttonMouseClicked
		// TODO add your handling code here:
		clickOnAddLoad();
	}// GEN-LAST:event_add_load_buttonMouseClicked

	private void chat_paneMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_chat_paneMouseClicked
		// TODO add your handling code here:

	}// GEN-LAST:event_chat_paneMouseClicked

	private void userJListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_userJListValueChanged
		// TODO add your handling code here:
		clickOnUserChatList(evt);
	}// GEN-LAST:event_userJListValueChanged

	private void loadJTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_loadJTableMouseClicked
		// TODO add your handling code here:
		clickOnLoadJTableList(evt);
	}// GEN-LAST:event_loadJTableMouseClicked

	private void driverJTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_driverJTableMouseClicked
		// TODO add your handling code here:
		clickOnDriverJTableList(evt);
	}// GEN-LAST:event_driverJTableMouseClicked

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger
					.getLogger(ApplicationFrame.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger
					.getLogger(ApplicationFrame.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger
					.getLogger(ApplicationFrame.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger
					.getLogger(ApplicationFrame.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ApplicationFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addDriver_button;
	private javax.swing.JButton add_load_button;
	private javax.swing.JTabbedPane chat_pane;
	private javax.swing.JTable driverJTable;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTable jTable1;
	private javax.swing.JTable loadJTable;
	private javax.swing.JList userJList;

	// End of variables declaration//GEN-END:variables

	/**
	 * Add Driver Dialog Visible
	 */
	private void clickOnAddDriver() {

		try {
			AddDriverInformations driverListJDialog = new AddDriverInformations(
					ApplicationFrame.this, true);
			driverListJDialog.setLocationRelativeTo(ApplicationFrame.this);
			driverListJDialog
					.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			driverListJDialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Add Load Dialog Visible
	 */
	private void clickOnAddLoad() {

		try {
			AddLoadInformations loadListJDialog = new AddLoadInformations(
					ApplicationFrame.this, true);
			loadListJDialog.setLocationRelativeTo(ApplicationFrame.this);
			loadListJDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			loadListJDialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Click Listener for Chat User List
	 *
	 * @param arg0
	 */
	private void clickOnUserChatList(ListSelectionEvent arg0) {
		AppLog.success("Application Frame:", "Click Listener Driver List");
		if (!arg0.getValueIsAdjusting()) {
			String chatUserName = userJList.getSelectedValue().toString();
			AppLog.success("Application Frame:ChatUserName", chatUserName);
			// chatScreen = new ChatScreen(ApplicationFrame.this, true,
			// chatUserName);
			ChatScreen chatScreen = ChatScreen.getInstance(
					ApplicationFrame.this, chatUserName);
			chatScreen.setLocationRelativeTo(ApplicationFrame.this);
			chatScreen.setVisible(true);
		}
	}

	@Override
	public void updateDriverList() {
		AppLog.success("Application Frame:", "updateDriverList");
		resetDriver();
		loadDriverJTable();
	}

	@Override
	public void updateChatUserList() {
		AppLog.success("Application Frame:", "updateChatUserList");
		loadChatUserList();
	}

	@Override
	public void updateLoadList() {
		AppLog.success("Application Frame:", "updateLoadList");
		resetLoad();
		loadLoadJTable();
	}

	/**
	 * Reset data of Driver
	 */
	private void resetDriver() {
		AppLog.success("Application Frame:", "resetDriverList");
		driverTableModel = (DefaultTableModel) driverJTable.getModel();
		driverTableModel.setRowCount(0);
		driverTableModel.fireTableDataChanged();
	}

	/**
	 * Reset data of Load
	 */
	private void resetLoad() {
		AppLog.success("Application Frame:", "resetLoadList");
		loadTableModel = (DefaultTableModel) loadJTable.getModel();
		loadTableModel.setRowCount(0);
		loadTableModel.fireTableDataChanged();
	}

	/**
	 * Click Listener for Load List
	 *
	 * @param e
	 */
	private void clickOnLoadJTableList(MouseEvent evt) {

		AppLog.success("Application Frame:", "Click Listener LoadJTable List");
		int row = loadJTable.rowAtPoint(evt.getPoint());
		int col = loadJTable.columnAtPoint(evt.getPoint());
		if (row >= 0 && col >= 0) {
			AppLog.success("Application Frame ==== Column:", "" + col);
			AppLog.success("Application Frame ==== Row:", "" + row);
		}

		if (col == 7) {
			AppLog.success("ApplicationFrame===Load List Table:",
					"Send Button Click");
			try {
				XMPPConnection connection = XmppManager.getConnection();
				if (connection != null) {
					String driver_assigned = loadJTable.getValueAt(row, 5)
							.toString();
					String driver_buddy_name = driver_assigned.split(":")[1];
					AppLog.success(driver_assigned, driver_assigned);
					AppLog.success(driver_buddy_name, driver_buddy_name);

					String msg4 = " Pickup Info: "
							+ loadJTable.getValueAt(row, 3).toString();
					String msg5 = "Delivery Info: "
							+ loadJTable.getValueAt(row, 4).toString();
					
					AppLog.success("msg4", html2text(msg4));

					String buddy_to_message1 = html2text(msg4);
					String buddy_to_message2 = html2text(msg5);
					AppLog.success(driver_buddy_name, driver_buddy_name);

					XmppManager.sendMessage(buddy_to_message1, driver_buddy_name
							+ "@localhost");
					XmppManager.sendMessage(buddy_to_message2, driver_buddy_name
							+ "@localhost");
					Utils.infoBox("Message Sent Successfully", "");
				}
			} catch (XMPPException ex) {
				Utils.infoBox("XMPP Connection Error", "XMPP Connection");
				Logger.getLogger(ApplicationFrame.class.getName()).log(
						Level.SEVERE, null, ex);
			}
		} else if (col == 8) {
			AppLog.success("ApplicationFrame===Load List Table:",
					"Edit Button Click");

			try {
				if (DbConnectionManager.getConnection() != null) {
					String id = loadJTable.getValueAt(row, 0).toString();
					AppLog.success(id, id);
					EditLoad el = new EditLoad(ApplicationFrame.this, true,
							DbConnectionManager.getConnection(),
							Integer.parseInt(id));
					el.setLocationRelativeTo(ApplicationFrame.this);
					el.setVisible(true);
				}
			} catch (ClassNotFoundException ex) {
				Utils.infoBox("XMPP Connection Error", "XMPP Connection");
				Logger.getLogger(ApplicationFrame.class.getName()).log(
						Level.SEVERE, null, ex);
			}

		} else if (col == 9) {
			AppLog.success("ApplicationFrame===Load List Table:",
					"Delete Button Click");
			String id = loadJTable.getValueAt(row, 0).toString();
			AppLog.success(id, id);
			if (DatabaseManager.getInstance() != null) {
				try {
					if (DbConnectionManager.getConnection() != null) {
						boolean flag = DatabaseManager.getInstance()
								.deleteLoad(
										DbConnectionManager.getConnection(),
										Integer.parseInt(id));
						AppLog.success("Delete Load", flag);
						if (flag == false) {
							Utils.infoBox("LOAD INFORMATIONS DELETED",
									"Load Informations");
							loadTableModel.removeRow(loadJTable
									.getSelectedRow());
						} else {
							Utils.infoBox("LOAD INFORMATION NOT DELETED ",
									"Load Informations");
						}
					}
				} catch (ClassNotFoundException ex) {
					Utils.infoBox("XMPP Connection Error", "XMPP Connection");
					Logger.getLogger(ApplicationFrame.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			}
		}
	}

	/**
	 * Click Listener for Driver List
	 *
	 * @param e
	 */
	private void clickOnDriverJTableList(MouseEvent evt) {

		AppLog.success("Application Frame:", "Click Listener DriverJTable List");
		int row = driverJTable.rowAtPoint(evt.getPoint());
		int col = driverJTable.columnAtPoint(evt.getPoint());
		if (row >= 0 && col >= 0) {
			AppLog.success("Application Frame ==== Column:", "" + col);
			AppLog.success("Application Frame ==== Row:", "" + row);

			if (col == 8) {
				AppLog.success("ApplicationFrame===Driver List Table:",
						"Edit Button Click");
				try {
					if (DbConnectionManager.getConnection() != null) {
						String driverId = driverJTable.getValueAt(row, 0)
								.toString();
						EditDriver ed = new EditDriver(ApplicationFrame.this,
								true, DbConnectionManager.getConnection(),
								Integer.parseInt(driverId));
						ed.setLocationRelativeTo(ApplicationFrame.this);
						ed.setVisible(true);
					}
				} catch (ClassNotFoundException ex) {
					Utils.infoBox("DATABASE Connection Error",
							"DATABASE Connection");
					Logger.getLogger(ApplicationFrame.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			} else if (col == 9) {
				AppLog.success("ApplicationFrame===Driver List Table:",
						"Delete Button Click");
				String driverId = driverJTable.getValueAt(row, 0).toString();
				AppLog.success(driverId, driverId);
				if (DatabaseManager.getInstance() != null) {
					try {
						try {
							if (DbConnectionManager.getConnection() != null
									&& XmppManager.getConnection() != null) {
								String driver_username = driverJTable
										.getValueAt(row, 1).toString();
								String url = "http://127.0.0.1:9090/plugins/userService/userservice?type=delete&secret="
										+ ConstantOfApp.USER_DELETE_SECRET_KEY
										+ "&username=" + driver_username + "";
								String response = deleteUserFromXmpp(url);
								AppLog.success("RESPONSE:", response);
								boolean flag = DatabaseManager
										.getInstance()
										.deleteDriver(
												DbConnectionManager
														.getConnection(),
												Integer.parseInt(driverId));
								AppLog.success("Driver Deleted Status", flag);
								if (flag == false && response.equals("ok")) {
									Utils.infoBox(
											"DRIVER INFORMATIONS DELETED",
											"Driver Informations");
									driverTableModel.removeRow(driverJTable
											.getSelectedRow());
								} else {
									Utils.infoBox(
											"DRIVER INFORMATION NOT DELETED ",
											"Driver Informations");
								}
							}
						} catch (XMPPException ex) {
							Logger.getLogger(ApplicationFrame.class.getName())
									.log(Level.SEVERE, null, ex);
						}
					} catch (ClassNotFoundException ex) {
						Utils.infoBox("DATABASE Connection Error",
								"DATABASE Connection");
						Logger.getLogger(ApplicationFrame.class.getName()).log(
								Level.SEVERE, null, ex);
					}
				}
			}
		}
	}

	/**
	 * Insert row data in Driver Table
	 */
	private void loadDriverJTable() {

		try {
			driverTableModel = (DefaultTableModel) driverJTable.getModel();
			// TableColumn column = null;
			if (DbConnectionManager.getConnection() != null) {
				Vector<DriverBean> driverArrayList = DatabaseManager
						.getInstance().getAllDrivers(
								DbConnectionManager.getConnection());
				AppLog.success("Driver List Size", "" + driverArrayList.size());
				if (driverArrayList.size() > 0) {
					AppLog.success("Driver Column count ",
							"" + driverJTable.getColumnCount());
					for (int i = 0; i < driverArrayList.size(); i++) {

						String[] data = new String[driverJTable
								.getColumnCount()];

						data[0] = driverArrayList.get(i).getDriverId();
						data[1] = driverArrayList.get(i).getUsername();
						data[2] = driverArrayList.get(i).getPhone();
						data[3] = driverArrayList.get(i).getFirstname();
						data[4] = driverArrayList.get(i).getLastname();
						data[5] = driverArrayList.get(i).getEmail();
						data[6] = driverArrayList.get(i).getTractor();
						data[7] = driverArrayList.get(i).getTrailor();
						data[8] = "Edit";
						data[9] = "Delete";
						driverJTable.getColumn("EDIT").setCellRenderer(
								new ButtonRenderer());
						driverJTable.getColumn("DELETE").setCellRenderer(
								new ButtonRenderer());

						driverTableModel.addRow(data);
					}
					AppLog.success("Driver Row count ",
							"" + driverJTable.getRowCount());
					driverJTable.setModel(driverTableModel);
					driverJTable.setRowHeight(30);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Insert Row data in Load Table
	 */
	private void loadLoadJTable() {

		try {
			loadTableModel = (DefaultTableModel) loadJTable.getModel();
			// TableColumn column = null;

			if (DbConnectionManager.getConnection() != null) {
				Vector<LoadBean> loadArrayList = DatabaseManager.getInstance()
						.getAllLoads(DbConnectionManager.getConnection());
				AppLog.success("Load List Size", "" + loadArrayList.size());
				if (loadArrayList.size() > 0) {
					for (int i = 0; i < loadArrayList.size(); i++) {

						String[] data = new String[loadJTable.getColumnCount()];

						data[0] = "" + loadArrayList.get(i).getId();
						data[1] = loadArrayList.get(i).getCompany_name();
						data[2] = loadArrayList.get(i).getCompany_phone();

						String pickup_address = "<html>"
								+ loadArrayList.get(i)
										.getPickup_name_of_place()
								+ "<br />"
								+ loadArrayList.get(i)
										.getPickup_street_address() + "<br/>"
								+ loadArrayList.get(i).getPickup_city()
								+ " " + loadArrayList.get(i).getPickup_state()
								+ " " + loadArrayList.get(i).getPickup_zip_code()
								+ "<br />" + " on "
								+ loadArrayList.get(i).getPickup_date()
								+ "<br/></html>";
						data[3] = pickup_address;

						String delivery_address = "<html>"
								+ loadArrayList.get(i)
										.getDelivery_name_of_place()
								+ "<br />"
								+ loadArrayList.get(i)
										.getDelivery_street_address()
								+ "<br />"
								+ loadArrayList.get(i).getDelivery_city()
								+ " " + loadArrayList.get(i).getDelivery_state()
								+ " " + loadArrayList.get(i).getDelivery_zip_code()
								+ "<br />" + " on "
								+ loadArrayList.get(i).getDelivery_date()
								+ "<br /></html>";
						data[4] = delivery_address;

						data[5] = loadArrayList.get(i).getDriver_assigned_id()
								+ ":"
								+ loadArrayList.get(i)
										.getDriver_assigned_name();
						data[6] = loadArrayList.get(i).getStatus();
						data[7] = "Send";
						data[8] = "Edit";
						data[9] = "Delete";

						loadTableModel.addRow(data);
						loadJTable.getColumn("SEND MESSAGE").setCellRenderer(
								new ButtonRenderer());
						loadJTable.getColumn("EDIT").setCellRenderer(
								new ButtonRenderer());
						loadJTable.getColumn("DELETE").setCellRenderer(
								new ButtonRenderer());

					}
					loadJTable.setModel(loadTableModel);
					loadJTable.setRowHeight(70);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Chat User List
	 */
	private void loadChatUserList() {

		try {
			DefaultListModel listModel = new DefaultListModel();
			if (DbConnectionManager.getConnection() != null) {
				Vector<DriverBean> driverArrayList = DatabaseManager
						.getInstance().getAllDrivers(
								DbConnectionManager.getConnection());
				if (driverArrayList.size() > 0) {
					for (int i = 0; i < driverArrayList.size(); i++) {
						listModel.addElement(driverArrayList.get(i)
								.getUsername());
						userJList.setModel(listModel);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Delete User From XMPP Server
	 *
	 * @return
	 */
	private String deleteUserFromXmpp(String SERVICE_URL) {

		String response_xml = "";
		String res = "";
		try {
			URL url = new URL(SERVICE_URL);
			URLConnection urlConnection = url.openConnection();
			BufferedReader in = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream()));
			String inputLine;
			while ((inputLine = in.readLine()) != null) {
				response_xml = inputLine;
			}
			in.close();
			Document doc = loadXMLFromString(response_xml);
			String name = doc.getDocumentElement().getNodeName();
			if (name.equals("result")) {
				res = "ok";
			} else if (name.equals("error")) {
				res = "UserNotFoundException";
			} else {
				res = "error";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return res;
	}

	/**
	 * Prase XML Response
	 *
	 * @param xml
	 * @return
	 * @throws Exception
	 */
	public static Document loadXMLFromString(String xml) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		InputSource is = new InputSource(new StringReader(xml));
		return builder.parse(is);
	}

	public static String html2text(String html) {
		return Jsoup.parse(html).text();
	}
}
